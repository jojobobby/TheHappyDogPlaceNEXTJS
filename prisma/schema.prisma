generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  quantity      Int
  images        Image[]
  sale          Sale?
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  rating        Float       @default(0)
  ratingCount   Int         @default(0)
  purchaseCount Int         @default(0)
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  order     Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  discount  Float
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  Int         @id @default(autoincrement())
  status              OrderStatus
  total               Float
  items               OrderItem[]
  customerName        String
  customerEmail       String
  customerPhone       String?
  shippingAddress     Json
  billingAddress      Json?
  paymentMethod       String
  paymentStatus       PaymentStatus
  paymentTransactionId String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model DashboardStats {
  id            Int      @id @default(autoincrement())
  totalProducts Int
  totalOrders   Int
  totalRevenue  Float
  updatedAt     DateTime @updatedAt
}
